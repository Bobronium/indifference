
version: '3'

vars:
  MATRIX: '{{ .MATRIX | default "0" }}'
  VERSIONS: '{{ .VERSIONS | default "" }}'

  PY_FROM_PYPROJECT:
    sh: |
      uv run --no-sync --isolated --python 3.13 - <<'PY'
      import re, sys, pathlib, tomllib
      data = tomllib.loads(pathlib.Path("pyproject.toml").read_text())
      cl = data.get("project", {}).get("classifiers", [])
      vers = [m.group(1) for s in cl if (m:=re.search(r"Python :: (\d\.\d+)$", s))]
      print(" ".join(sorted(set(vers))))
      PY

  ALL_PY: '{{ .PY_FROM_PYPROJECT }}'

  PY_CURRENT:
    sh: |
      python - <<'PY'
      import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")
      PY

  PY_LIST:
    sh: |
      if [ -n "{{.VERSIONS}}" ]; then
        echo "{{.VERSIONS}}" | tr ',' ' '
      elif [ "{{.MATRIX}}" = "1" ]; then
        echo "{{ .ALL_PY }}"
      else
        echo "{{ .PY_CURRENT }}"
      fi

  SELECTED_PY_VERSIONS:
    sh: |
      if [ -n "{{.VERSIONS}}" ]; then
        echo "{{.VERSIONS}}" | tr ',' ' '
      elif [ "{{.MATRIX}}" = "1" ]; then
        echo "{{ .PY_LIST }}"
      else
        echo "{{ .PY_CURRENT }}"
      fi

tasks:
  setup:
    desc: Install deps
    cmd: uv sync --extra dev --inexact --quiet

  default:
    desc: Run all checks
    deps: [ typecheck, lint, test ]

  license:
    cmd: reuse annotate --license MIT --copyright "Arseny Boykov (Bobronium) <hi@bobronium.me>" -y $(date +%Y)-present

  format:
    desc: Format
    cmd: uv run --inexact --extra lint ruff format src tests

  lint:
    desc: Lint
    deps: [ format ]
    cmd: uv run --inexact --extra lint ruff check src tests --fix

  clear:
    desc: Clear __pycache__
    cmds:
      - rm -rf ./**/*/__pycache__ ./**/__pycache__ ./__pycache__
    silent: true

  typecheck:
    desc: Typecheck
    env:
      MYPYPATH: src
    cmd: |
        bash -euo pipefail -c '
          run_typecheck () {
            local PYV="$1"
            echo "▶ Typechecking Python $PYV"
            uv sync --inexact --quiet --extra typecheck
            uv run --no-sync mypy src tests --python-version "$PYV"
            uv run --no-sync pyright src tests --pythonversion "$PYV"
          }
          if [ "{{.MATRIX}}" != "1" ] && [ -z "{{.VERSIONS}}" ]; then
            run_typecheck "{{ .PY_CURRENT }}"; exit 0; fi
          for v in {{ .SELECTED_PY_VERSIONS }}; do run_typecheck "$v"; done
        '

  test:
    desc: Run tests
    cmd: |
        bash -euo pipefail -c '
          rm -f .coverage .coverage.pytest-cov
          if [ "{{.MATRIX}}" != "1" ] && [ -z "{{.VERSIONS}}" ]; then
            echo "▶ Tests on current environment"
            uv sync --inexact --quiet --extra test
            uv run pytest --cov-append
            exit 0
          fi
          for V in {{ .SELECTED_PY_VERSIONS }}; do
            echo "▶ Tests on Python $V"
            VENV=".task/venv${V}"
            if [ ! -d "$VENV" ]; then uv venv --clear --no-project --python "$V" "$VENV"; fi
            ACT="$VENV/bin/activate"; [ -f "$VENV/Scripts/activate" ] && ACT="$VENV/Scripts/activate"
            . "$ACT"
            uv sync --active --inexact --quiet --extra test
            uv run --active pytest --cov-append
            deactivate
          done
        '

  htmlcov:
    desc: Open coverage HTML
    deps: [ test ]
    cmds:
      - uv run --inexact --extra test coverage html
      - open htmlcov/index.html || true
